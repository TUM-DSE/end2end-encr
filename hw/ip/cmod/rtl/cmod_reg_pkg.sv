// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package cmod_reg_pkg;

  // Param list
  parameter int NumRegsData = 4;
  parameter int NumAlerts = 1;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } tx_watermark;
    struct packed {
      logic        q;
    } rx_watermark;
    struct packed {
      logic        q;
    } tx_empty;
  } cmod_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } tx_watermark;
    struct packed {
      logic        q;
    } rx_watermark;
    struct packed {
      logic        q;
    } tx_empty;
  } cmod_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } tx_watermark;
    struct packed {
      logic        q;
      logic        qe;
    } rx_watermark;
    struct packed {
      logic        q;
      logic        qe;
    } tx_empty;
  } cmod_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } cmod_reg2hw_alert_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } txtrigger;
    struct packed {
      logic        q;
    } txend;
    struct packed {
      logic        q;
    } rxconfirm;
    struct packed {
      logic [1:0]  q;
    } txilvl;
    struct packed {
      logic [1:0]  q;
    } rxilvl;
  } cmod_reg2hw_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        re;
    } tx;
    struct packed {
      logic        q;
      logic        re;
    } txfull;
    struct packed {
      logic        q;
      logic        re;
    } rxfull;
    struct packed {
      logic        q;
      logic        re;
    } txempty;
    struct packed {
      logic        q;
      logic        re;
    } txinput_ready;
    struct packed {
      logic        q;
      logic        re;
    } rxvalid;
    struct packed {
      logic [2:0]  q;
      logic        re;
    } txlvl;
    struct packed {
      logic [2:0]  q;
      logic        re;
    } rxlvl;
    struct packed {
      logic        q;
      logic        re;
    } rxlast;
  } cmod_reg2hw_status_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } cmod_reg2hw_wdata_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        re;
  } cmod_reg2hw_rdata_mreg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } tx_watermark;
    struct packed {
      logic        d;
      logic        de;
    } rx_watermark;
    struct packed {
      logic        d;
      logic        de;
    } tx_empty;
  } cmod_hw2reg_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } txtrigger;
    struct packed {
      logic        d;
      logic        de;
    } txend;
    struct packed {
      logic        d;
      logic        de;
    } rxconfirm;
    struct packed {
      logic [1:0]  d;
      logic        de;
    } txilvl;
    struct packed {
      logic [1:0]  d;
      logic        de;
    } rxilvl;
  } cmod_hw2reg_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } tx;
    struct packed {
      logic        d;
    } txfull;
    struct packed {
      logic        d;
    } rxfull;
    struct packed {
      logic        d;
    } txempty;
    struct packed {
      logic        d;
    } txinput_ready;
    struct packed {
      logic        d;
    } rxvalid;
    struct packed {
      logic [2:0]  d;
    } txlvl;
    struct packed {
      logic [2:0]  d;
    } rxlvl;
    struct packed {
      logic        d;
    } rxlast;
  } cmod_hw2reg_status_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } cmod_hw2reg_wdata_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } cmod_hw2reg_rdata_mreg_t;

  // Register -> HW type
  typedef struct packed {
    cmod_reg2hw_intr_state_reg_t intr_state; // [306:304]
    cmod_reg2hw_intr_enable_reg_t intr_enable; // [303:301]
    cmod_reg2hw_intr_test_reg_t intr_test; // [300:295]
    cmod_reg2hw_alert_test_reg_t alert_test; // [294:293]
    cmod_reg2hw_ctrl_reg_t ctrl; // [292:286]
    cmod_reg2hw_status_reg_t status; // [285:264]
    cmod_reg2hw_wdata_mreg_t [3:0] wdata; // [263:132]
    cmod_reg2hw_rdata_mreg_t [3:0] rdata; // [131:0]
  } cmod_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    cmod_hw2reg_intr_state_reg_t intr_state; // [290:285]
    cmod_hw2reg_ctrl_reg_t ctrl; // [284:273]
    cmod_hw2reg_status_reg_t status; // [272:260]
    cmod_hw2reg_wdata_mreg_t [3:0] wdata; // [259:128]
    cmod_hw2reg_rdata_mreg_t [3:0] rdata; // [127:0]
  } cmod_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CMOD_INTR_STATE_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] CMOD_INTR_ENABLE_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] CMOD_INTR_TEST_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] CMOD_ALERT_TEST_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] CMOD_CTRL_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] CMOD_STATUS_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] CMOD_WDATA_0_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] CMOD_WDATA_1_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] CMOD_WDATA_2_OFFSET = 6'h 20;
  parameter logic [BlockAw-1:0] CMOD_WDATA_3_OFFSET = 6'h 24;
  parameter logic [BlockAw-1:0] CMOD_RDATA_0_OFFSET = 6'h 28;
  parameter logic [BlockAw-1:0] CMOD_RDATA_1_OFFSET = 6'h 2c;
  parameter logic [BlockAw-1:0] CMOD_RDATA_2_OFFSET = 6'h 30;
  parameter logic [BlockAw-1:0] CMOD_RDATA_3_OFFSET = 6'h 34;

  // Reset values for hwext registers and their fields
  parameter logic [2:0] CMOD_INTR_TEST_RESVAL = 3'h 0;
  parameter logic [0:0] CMOD_INTR_TEST_TX_WATERMARK_RESVAL = 1'h 0;
  parameter logic [0:0] CMOD_INTR_TEST_RX_WATERMARK_RESVAL = 1'h 0;
  parameter logic [0:0] CMOD_INTR_TEST_TX_EMPTY_RESVAL = 1'h 0;
  parameter logic [0:0] CMOD_ALERT_TEST_RESVAL = 1'h 0;
  parameter logic [0:0] CMOD_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;
  parameter logic [12:0] CMOD_STATUS_RESVAL = 13'h 0;
  parameter logic [31:0] CMOD_RDATA_0_RESVAL = 32'h 0;
  parameter logic [31:0] CMOD_RDATA_0_RDATA_0_RESVAL = 32'h 0;
  parameter logic [31:0] CMOD_RDATA_1_RESVAL = 32'h 0;
  parameter logic [31:0] CMOD_RDATA_1_RDATA_1_RESVAL = 32'h 0;
  parameter logic [31:0] CMOD_RDATA_2_RESVAL = 32'h 0;
  parameter logic [31:0] CMOD_RDATA_2_RDATA_2_RESVAL = 32'h 0;
  parameter logic [31:0] CMOD_RDATA_3_RESVAL = 32'h 0;
  parameter logic [31:0] CMOD_RDATA_3_RDATA_3_RESVAL = 32'h 0;

  // Register index
  typedef enum int {
    CMOD_INTR_STATE,
    CMOD_INTR_ENABLE,
    CMOD_INTR_TEST,
    CMOD_ALERT_TEST,
    CMOD_CTRL,
    CMOD_STATUS,
    CMOD_WDATA_0,
    CMOD_WDATA_1,
    CMOD_WDATA_2,
    CMOD_WDATA_3,
    CMOD_RDATA_0,
    CMOD_RDATA_1,
    CMOD_RDATA_2,
    CMOD_RDATA_3
  } cmod_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CMOD_PERMIT [14] = '{
    4'b 0001, // index[ 0] CMOD_INTR_STATE
    4'b 0001, // index[ 1] CMOD_INTR_ENABLE
    4'b 0001, // index[ 2] CMOD_INTR_TEST
    4'b 0001, // index[ 3] CMOD_ALERT_TEST
    4'b 0001, // index[ 4] CMOD_CTRL
    4'b 0011, // index[ 5] CMOD_STATUS
    4'b 1111, // index[ 6] CMOD_WDATA_0
    4'b 1111, // index[ 7] CMOD_WDATA_1
    4'b 1111, // index[ 8] CMOD_WDATA_2
    4'b 1111, // index[ 9] CMOD_WDATA_3
    4'b 1111, // index[10] CMOD_RDATA_0
    4'b 1111, // index[11] CMOD_RDATA_1
    4'b 1111, // index[12] CMOD_RDATA_2
    4'b 1111  // index[13] CMOD_RDATA_3
  };

endpackage
