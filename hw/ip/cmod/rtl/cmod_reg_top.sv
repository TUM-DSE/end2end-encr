// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module cmod_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output cmod_reg_pkg::cmod_reg2hw_t reg2hw, // Write
  input  cmod_reg_pkg::cmod_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import cmod_reg_pkg::* ;

  localparam int AW = 6;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [13:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(14)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_tx_watermark_qs;
  logic intr_state_tx_watermark_wd;
  logic intr_state_rx_watermark_qs;
  logic intr_state_rx_watermark_wd;
  logic intr_state_tx_empty_qs;
  logic intr_state_tx_empty_wd;
  logic intr_state_rx_overflow_qs;
  logic intr_state_rx_overflow_wd;
  logic intr_enable_we;
  logic intr_enable_tx_watermark_qs;
  logic intr_enable_tx_watermark_wd;
  logic intr_enable_rx_watermark_qs;
  logic intr_enable_rx_watermark_wd;
  logic intr_enable_tx_empty_qs;
  logic intr_enable_tx_empty_wd;
  logic intr_enable_rx_overflow_qs;
  logic intr_enable_rx_overflow_wd;
  logic intr_test_we;
  logic intr_test_tx_watermark_wd;
  logic intr_test_rx_watermark_wd;
  logic intr_test_tx_empty_wd;
  logic intr_test_rx_overflow_wd;
  logic alert_test_we;
  logic alert_test_wd;
  logic ctrl_we;
  logic ctrl_txtrigger_qs;
  logic ctrl_txtrigger_wd;
  logic ctrl_txend_qs;
  logic ctrl_txend_wd;
  logic [1:0] ctrl_txilvl_qs;
  logic [1:0] ctrl_txilvl_wd;
  logic [1:0] ctrl_rxilvl_qs;
  logic [1:0] ctrl_rxilvl_wd;
  logic status_re;
  logic status_txfull_qs;
  logic status_rxfull_qs;
  logic status_txempty_qs;
  logic status_tx_qs;
  logic status_rxvalid_qs;
  logic [2:0] status_txlvl_qs;
  logic [2:0] status_rxlvl_qs;
  logic status_rxlast_qs;
  logic wdata_0_we;
  logic [31:0] wdata_0_wd;
  logic wdata_1_we;
  logic [31:0] wdata_1_wd;
  logic wdata_2_we;
  logic [31:0] wdata_2_wd;
  logic wdata_3_we;
  logic [31:0] wdata_3_wd;
  logic rdata_0_re;
  logic [31:0] rdata_0_qs;
  logic rdata_1_re;
  logic [31:0] rdata_1_qs;
  logic rdata_2_re;
  logic [31:0] rdata_2_qs;
  logic rdata_3_re;
  logic [31:0] rdata_3_qs;

  // Register instances
  // R[intr_state]: V(False)
  //   F[tx_watermark]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_tx_watermark (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_tx_watermark_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.tx_watermark.de),
    .d      (hw2reg.intr_state.tx_watermark.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.tx_watermark.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_tx_watermark_qs)
  );

  //   F[rx_watermark]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_rx_watermark (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_rx_watermark_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.rx_watermark.de),
    .d      (hw2reg.intr_state.rx_watermark.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.rx_watermark.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_rx_watermark_qs)
  );

  //   F[tx_empty]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_tx_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_tx_empty_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.tx_empty.de),
    .d      (hw2reg.intr_state.tx_empty.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.tx_empty.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_tx_empty_qs)
  );

  //   F[rx_overflow]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_rx_overflow (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_rx_overflow_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.rx_overflow.de),
    .d      (hw2reg.intr_state.rx_overflow.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.rx_overflow.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_rx_overflow_qs)
  );


  // R[intr_enable]: V(False)
  //   F[tx_watermark]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_tx_watermark (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_tx_watermark_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.tx_watermark.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_tx_watermark_qs)
  );

  //   F[rx_watermark]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_rx_watermark (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_rx_watermark_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.rx_watermark.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_rx_watermark_qs)
  );

  //   F[tx_empty]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_tx_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_tx_empty_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.tx_empty.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_tx_empty_qs)
  );

  //   F[rx_overflow]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_rx_overflow (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_rx_overflow_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.rx_overflow.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_rx_overflow_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [3:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  //   F[tx_watermark]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_tx_watermark (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_tx_watermark_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.tx_watermark.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.tx_watermark.qe = intr_test_qe;

  //   F[rx_watermark]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_rx_watermark (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_rx_watermark_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[1]),
    .q      (reg2hw.intr_test.rx_watermark.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.rx_watermark.qe = intr_test_qe;

  //   F[tx_empty]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_tx_empty (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_tx_empty_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[2]),
    .q      (reg2hw.intr_test.tx_empty.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.tx_empty.qe = intr_test_qe;

  //   F[rx_overflow]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_rx_overflow (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_rx_overflow_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[3]),
    .q      (reg2hw.intr_test.rx_overflow.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.rx_overflow.qe = intr_test_qe;


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [0:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.qe = alert_test_qe;


  // R[ctrl]: V(False)
  //   F[txtrigger]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ctrl_txtrigger (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_txtrigger_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.txtrigger.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_txtrigger_qs)
  );

  //   F[txend]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ctrl_txend (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_txend_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.txend.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_txend_qs)
  );

  //   F[txilvl]: 3:2
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ctrl_txilvl (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_txilvl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.txilvl.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_txilvl_qs)
  );

  //   F[rxilvl]: 5:4
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_ctrl_rxilvl (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_rxilvl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.rxilvl.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_rxilvl_qs)
  );


  // R[status]: V(True)
  //   F[txfull]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_txfull (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.txfull.d),
    .qre    (reg2hw.status.txfull.re),
    .qe     (),
    .q      (reg2hw.status.txfull.q),
    .ds     (),
    .qs     (status_txfull_qs)
  );

  //   F[rxfull]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rxfull (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rxfull.d),
    .qre    (reg2hw.status.rxfull.re),
    .qe     (),
    .q      (reg2hw.status.rxfull.q),
    .ds     (),
    .qs     (status_rxfull_qs)
  );

  //   F[txempty]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_txempty (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.txempty.d),
    .qre    (reg2hw.status.txempty.re),
    .qe     (),
    .q      (reg2hw.status.txempty.q),
    .ds     (),
    .qs     (status_txempty_qs)
  );

  //   F[tx]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_tx (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.tx.d),
    .qre    (reg2hw.status.tx.re),
    .qe     (),
    .q      (reg2hw.status.tx.q),
    .ds     (),
    .qs     (status_tx_qs)
  );

  //   F[rxvalid]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rxvalid (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rxvalid.d),
    .qre    (reg2hw.status.rxvalid.re),
    .qe     (),
    .q      (reg2hw.status.rxvalid.q),
    .ds     (),
    .qs     (status_rxvalid_qs)
  );

  //   F[txlvl]: 7:5
  prim_subreg_ext #(
    .DW    (3)
  ) u_status_txlvl (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.txlvl.d),
    .qre    (reg2hw.status.txlvl.re),
    .qe     (),
    .q      (reg2hw.status.txlvl.q),
    .ds     (),
    .qs     (status_txlvl_qs)
  );

  //   F[rxlvl]: 10:8
  prim_subreg_ext #(
    .DW    (3)
  ) u_status_rxlvl (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rxlvl.d),
    .qre    (reg2hw.status.rxlvl.re),
    .qe     (),
    .q      (reg2hw.status.rxlvl.q),
    .ds     (),
    .qs     (status_rxlvl_qs)
  );

  //   F[rxlast]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rxlast (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rxlast.d),
    .qre    (reg2hw.status.rxlast.re),
    .qe     (),
    .q      (reg2hw.status.rxlast.q),
    .ds     (),
    .qs     (status_rxlast_qs)
  );


  // Subregister 0 of Multireg wdata
  // R[wdata_0]: V(False)
  logic wdata_0_qe;
  logic [0:0] wdata_0_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_wdata0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&wdata_0_flds_we),
    .q_o(wdata_0_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (32'h0)
  ) u_wdata_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wdata_0_we),
    .wd     (wdata_0_wd),

    // from internal hardware
    .de     (hw2reg.wdata[0].de),
    .d      (hw2reg.wdata[0].d),

    // to internal hardware
    .qe     (wdata_0_flds_we[0]),
    .q      (reg2hw.wdata[0].q),
    .ds     (),

    // to register interface (read)
    .qs     ()
  );
  assign reg2hw.wdata[0].qe = wdata_0_qe;


  // Subregister 1 of Multireg wdata
  // R[wdata_1]: V(False)
  logic wdata_1_qe;
  logic [0:0] wdata_1_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_wdata1_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&wdata_1_flds_we),
    .q_o(wdata_1_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (32'h0)
  ) u_wdata_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wdata_1_we),
    .wd     (wdata_1_wd),

    // from internal hardware
    .de     (hw2reg.wdata[1].de),
    .d      (hw2reg.wdata[1].d),

    // to internal hardware
    .qe     (wdata_1_flds_we[0]),
    .q      (reg2hw.wdata[1].q),
    .ds     (),

    // to register interface (read)
    .qs     ()
  );
  assign reg2hw.wdata[1].qe = wdata_1_qe;


  // Subregister 2 of Multireg wdata
  // R[wdata_2]: V(False)
  logic wdata_2_qe;
  logic [0:0] wdata_2_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_wdata2_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&wdata_2_flds_we),
    .q_o(wdata_2_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (32'h0)
  ) u_wdata_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wdata_2_we),
    .wd     (wdata_2_wd),

    // from internal hardware
    .de     (hw2reg.wdata[2].de),
    .d      (hw2reg.wdata[2].d),

    // to internal hardware
    .qe     (wdata_2_flds_we[0]),
    .q      (reg2hw.wdata[2].q),
    .ds     (),

    // to register interface (read)
    .qs     ()
  );
  assign reg2hw.wdata[2].qe = wdata_2_qe;


  // Subregister 3 of Multireg wdata
  // R[wdata_3]: V(False)
  logic wdata_3_qe;
  logic [0:0] wdata_3_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_wdata3_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&wdata_3_flds_we),
    .q_o(wdata_3_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (32'h0)
  ) u_wdata_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wdata_3_we),
    .wd     (wdata_3_wd),

    // from internal hardware
    .de     (hw2reg.wdata[3].de),
    .d      (hw2reg.wdata[3].d),

    // to internal hardware
    .qe     (wdata_3_flds_we[0]),
    .q      (reg2hw.wdata[3].q),
    .ds     (),

    // to register interface (read)
    .qs     ()
  );
  assign reg2hw.wdata[3].qe = wdata_3_qe;


  // Subregister 0 of Multireg rdata
  // R[rdata_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rdata_0 (
    .re     (rdata_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rdata[0].d),
    .qre    (reg2hw.rdata[0].re),
    .qe     (),
    .q      (reg2hw.rdata[0].q),
    .ds     (),
    .qs     (rdata_0_qs)
  );


  // Subregister 1 of Multireg rdata
  // R[rdata_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rdata_1 (
    .re     (rdata_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rdata[1].d),
    .qre    (reg2hw.rdata[1].re),
    .qe     (),
    .q      (reg2hw.rdata[1].q),
    .ds     (),
    .qs     (rdata_1_qs)
  );


  // Subregister 2 of Multireg rdata
  // R[rdata_2]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rdata_2 (
    .re     (rdata_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rdata[2].d),
    .qre    (reg2hw.rdata[2].re),
    .qe     (),
    .q      (reg2hw.rdata[2].q),
    .ds     (),
    .qs     (rdata_2_qs)
  );


  // Subregister 3 of Multireg rdata
  // R[rdata_3]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rdata_3 (
    .re     (rdata_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rdata[3].d),
    .qre    (reg2hw.rdata[3].re),
    .qe     (),
    .q      (reg2hw.rdata[3].q),
    .ds     (),
    .qs     (rdata_3_qs)
  );



  logic [13:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == CMOD_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == CMOD_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == CMOD_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == CMOD_ALERT_TEST_OFFSET);
    addr_hit[ 4] = (reg_addr == CMOD_CTRL_OFFSET);
    addr_hit[ 5] = (reg_addr == CMOD_STATUS_OFFSET);
    addr_hit[ 6] = (reg_addr == CMOD_WDATA_0_OFFSET);
    addr_hit[ 7] = (reg_addr == CMOD_WDATA_1_OFFSET);
    addr_hit[ 8] = (reg_addr == CMOD_WDATA_2_OFFSET);
    addr_hit[ 9] = (reg_addr == CMOD_WDATA_3_OFFSET);
    addr_hit[10] = (reg_addr == CMOD_RDATA_0_OFFSET);
    addr_hit[11] = (reg_addr == CMOD_RDATA_1_OFFSET);
    addr_hit[12] = (reg_addr == CMOD_RDATA_2_OFFSET);
    addr_hit[13] = (reg_addr == CMOD_RDATA_3_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(CMOD_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(CMOD_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(CMOD_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(CMOD_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(CMOD_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(CMOD_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(CMOD_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(CMOD_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(CMOD_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(CMOD_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(CMOD_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(CMOD_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(CMOD_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(CMOD_PERMIT[13] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;

  assign intr_state_tx_watermark_wd = reg_wdata[0];

  assign intr_state_rx_watermark_wd = reg_wdata[1];

  assign intr_state_tx_empty_wd = reg_wdata[2];

  assign intr_state_rx_overflow_wd = reg_wdata[3];
  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;

  assign intr_enable_tx_watermark_wd = reg_wdata[0];

  assign intr_enable_rx_watermark_wd = reg_wdata[1];

  assign intr_enable_tx_empty_wd = reg_wdata[2];

  assign intr_enable_rx_overflow_wd = reg_wdata[3];
  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;

  assign intr_test_tx_watermark_wd = reg_wdata[0];

  assign intr_test_rx_watermark_wd = reg_wdata[1];

  assign intr_test_tx_empty_wd = reg_wdata[2];

  assign intr_test_rx_overflow_wd = reg_wdata[3];
  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;

  assign alert_test_wd = reg_wdata[0];
  assign ctrl_we = addr_hit[4] & reg_we & !reg_error;

  assign ctrl_txtrigger_wd = reg_wdata[0];

  assign ctrl_txend_wd = reg_wdata[1];

  assign ctrl_txilvl_wd = reg_wdata[3:2];

  assign ctrl_rxilvl_wd = reg_wdata[5:4];
  assign status_re = addr_hit[5] & reg_re & !reg_error;
  assign wdata_0_we = addr_hit[6] & reg_we & !reg_error;

  assign wdata_0_wd = reg_wdata[31:0];
  assign wdata_1_we = addr_hit[7] & reg_we & !reg_error;

  assign wdata_1_wd = reg_wdata[31:0];
  assign wdata_2_we = addr_hit[8] & reg_we & !reg_error;

  assign wdata_2_wd = reg_wdata[31:0];
  assign wdata_3_we = addr_hit[9] & reg_we & !reg_error;

  assign wdata_3_wd = reg_wdata[31:0];
  assign rdata_0_re = addr_hit[10] & reg_re & !reg_error;
  assign rdata_1_re = addr_hit[11] & reg_re & !reg_error;
  assign rdata_2_re = addr_hit[12] & reg_re & !reg_error;
  assign rdata_3_re = addr_hit[13] & reg_re & !reg_error;

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = intr_state_we;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = alert_test_we;
    reg_we_check[4] = ctrl_we;
    reg_we_check[5] = 1'b0;
    reg_we_check[6] = wdata_0_we;
    reg_we_check[7] = wdata_1_we;
    reg_we_check[8] = wdata_2_we;
    reg_we_check[9] = wdata_3_we;
    reg_we_check[10] = 1'b0;
    reg_we_check[11] = 1'b0;
    reg_we_check[12] = 1'b0;
    reg_we_check[13] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_tx_watermark_qs;
        reg_rdata_next[1] = intr_state_rx_watermark_qs;
        reg_rdata_next[2] = intr_state_tx_empty_qs;
        reg_rdata_next[3] = intr_state_rx_overflow_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_tx_watermark_qs;
        reg_rdata_next[1] = intr_enable_rx_watermark_qs;
        reg_rdata_next[2] = intr_enable_tx_empty_qs;
        reg_rdata_next[3] = intr_enable_rx_overflow_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = ctrl_txtrigger_qs;
        reg_rdata_next[1] = ctrl_txend_qs;
        reg_rdata_next[3:2] = ctrl_txilvl_qs;
        reg_rdata_next[5:4] = ctrl_rxilvl_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = status_txfull_qs;
        reg_rdata_next[1] = status_rxfull_qs;
        reg_rdata_next[2] = status_txempty_qs;
        reg_rdata_next[3] = status_tx_qs;
        reg_rdata_next[4] = status_rxvalid_qs;
        reg_rdata_next[7:5] = status_txlvl_qs;
        reg_rdata_next[10:8] = status_rxlvl_qs;
        reg_rdata_next[11] = status_rxlast_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = rdata_0_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = rdata_1_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = rdata_2_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = rdata_3_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
